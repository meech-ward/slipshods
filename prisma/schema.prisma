// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // provider = "postgresql"
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String      @id @default(cuid())
  name           String?
  email          String?     @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime    @default(now())
  totalPosts     Int         @default(0)
  totalComments  Int         @default(0)
  totalLikes     Int         @default(0)
  totalFollowers Int         @default(0)
  totalFollowing Int         @default(0)
  accounts       Account[]
  sessions       Session[]
  posts          Posts[]
  comments       Comments[]
  likes          Likes[]
  followers      Followers[] @relation("follower")
  following      Followers[] @relation("following")

  @@map("users")
}

model Followers {
  id          String @id @default(cuid())
  follower    User   @relation(name: "follower", fields: [followerId], references: [id])
  followerId  String
  following   User   @relation(name: "following", fields: [followingId], references: [id])
  followingId String

  @@map("followers")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Posts {
  id            Int        @id @default(autoincrement())
  title         String
  code          String     @db.Text
  totalComments Int        @default(0)
  totalLikes    Int        @default(0)
  createdAt     DateTime   @default(now())
  userId        String
  user          User       @relation(fields: [userId], references: [id])
  comments      Comments[]
  likes         Likes[]
}

model Comments {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  code      String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Posts    @relation(fields: [postId], references: [id])
}

model Likes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    Int
  post      Posts    @relation(fields: [postId], references: [id])
}
